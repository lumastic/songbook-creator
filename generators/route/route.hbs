 {{!-- Remixed ðŸ˜‰ from https://github.com/bradgarropy/plop-generator-remix-route/blob/master/src/route.ts --}}

import type {
{{#includes features "action"}}
    ActionArgs,
{{/includes}}
{{#includes features "error"}}
    ErrorBoundaryComponent,
{{/includes}}
{{#includes features "meta"}}
    HtmlMetaDescriptor,
{{/includes}}
{{#includes features "links"}}
    LinkDescriptor,
    LinksFunction,
{{/includes}}
{{#includes features "loader"}}
    LoaderArgs,
{{/includes}}
{{#includes features "meta"}}
    MetaFunction,
{{/includes}}
} from "@remix-run/node"
{{#includes features "loader"}}
    import { typedjson, useTypedLoaderData } from "remix-typedjson";
{{/includes}}
import {
{{#includes features "action"}}
    redirect
{{/includes}}
} from "@remix-run/node"
{{#includes features "catch"}}
import {useCatch, useParams} from "@remix-run/react"
{{/includes}}
{{#includes features "component"}}
import type { FC } from "react"
{{/includes}}

{{#includes features "links"}}
export const links: LinksFunction = () => {
    const links: LinkDescriptor[] = []
    return links
}
{{/includes}}

{{#includes features "meta"}}
export const meta: MetaFunction = () => {
    const meta: HtmlMetaDescriptor = {}
    return meta
}
{{/includes}}

{{#includes features "loader"}}
export const loader = async ({request, params}: LoaderArgs) => {
    const data = {}
    return typedjson(data)
}
{{/includes}}

{{#includes features "action"}}
export const action = async ({request, params}: ActionArgs) => {
    return redirect("/")
}
{{/includes}}

{{#includes features "component"}}
const {{pascalCase name}}Route: FC = () => {
    {{#includes features "loader"}}
      const data = useTypedLoaderData<typeof loader>();
    {{/includes}}
    return (
      <div className="space-y-4 max-w-xl mx-auto">
        <h2>
          {{pascalCase name}}Route
        </h2>
      </div>
    )
}
{{/includes}}

{{#includes features "catch"}}
export const CatchBoundary = () => {
    const caught = useCatch()
    const params = useParams()

    return <p>Something went wrong.</p>
}
{{/includes}}

{{#includes features "error"}}
export const ErrorBoundary: ErrorBoundaryComponent = ({error}) => {
    console.log(error)

    const params = useParams()
    return <p>Something went wrong.</p>
}
{{/includes}}

export default {{pascalCase name}}Route